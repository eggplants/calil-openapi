openapi: 3.1.0
info:
  contact:
    name: カーリルサポートデスク
    url: 'https://calil.jp/doc/contact.html'
    email: contact@calil.jp
  title: Calil Library API
  version: '1.0'
  description: 'https://calil.jp/doc/api_ref.html'
  summary: カーリル図書館API
servers:
  - url: 'https://api.calil.jp'
paths:
  /library:
    parameters: []
    get:
      summary: 図書館データベース
      tags: []
      responses:
        '200':
          description: 東京女子大学図書館
          content:
            application/json:
              schema:
                type: array
                description: 図書館情報一覧
                minItems: 0
                uniqueItems: true
                items:
                  type: object
                  description: 図書館情報
                  properties:
                    libid:
                      type: string
                      minLength: 1
                      pattern: ^\d+$
                      example: '106192'
                      description: 図書館のユニークID
                    formal:
                      type: string
                      minLength: 1
                      example: 東京女子大学図書館
                      description: 正式名称
                    short:
                      type:
                        - string
                        - 'null'
                      minLength: 1
                      example: 図書館
                      description: 略称
                    systemid:
                      type: string
                      minLength: 1
                      example: Univ_Twcu
                      pattern: '^[A-Z][A-Za-z]*\d*(_[A-Z]?[A-Za-z0-9]*)+$'
                      description: システムID
                    systemname:
                      type: string
                      minLength: 1
                      example: 東京女子大学
                      description: システム名称
                    libkey:
                      type: string
                      minLength: 1
                      example: 本館
                      description: システム毎の図書館キー
                    category:
                      type: string
                      minLength: 1
                      enum:
                        - SMALL
                        - MEDIUM
                        - LARGE
                        - UNIV
                        - SPECIAL
                        - BM
                      example: UNIV
                      description: カテゴリー
                    post:
                      type: string
                      minLength: 1
                      pattern: '^\d{3}-\d{4}$'
                      example: 167-8585
                      description: 郵便番号
                    tel:
                      type:
                        - string
                        - 'null'
                      minLength: 1
                      example: 03-5382-6784
                      pattern: '^(\d{2}-\d{4}-\d{4}|\d{3}-\d{3}-\d{4}|\d{3}-\d{2}-\d{4}|\d{3}-\d{4}-\d{4}|\d{4}-\d{2}-\d{4}|\d{4}-\d{3}-\d{3}|\d{5}-\d{1}-\d{4})(\s+(\[[ぁ-んァ-ン一-龯ー]+\]|\(内線\d+([-,]\d+)?\)))*$'
                      description: 電話番号
                    pref:
                      $ref: '#/components/schemas/pref'
                    city:
                      type: string
                      minLength: 1
                      pattern: '^[ぁ-んァ-ン一-龯ー]+[市区町村]$'
                      example: 杉並区
                      description: 市町村
                    address:
                      type: string
                      minLength: 1
                      example: 東京都杉並区善福寺2丁目6-1
                      description: 住所
                    geocode:
                      type: string
                      minLength: 1
                      example: '139.589455,35.710908'
                      pattern: '^\d+(\.\d+),\d+(\.\d+)$'
                      description: 位置情報
                    isil:
                      type:
                        - string
                        - 'null'
                      minLength: 1
                      example: JP-1003957
                      pattern: '^JP-\d{7}$'
                      description: 図書館及び関連組織のための国際標準識別子
                    faid:
                      type:
                        - string
                        - 'null'
                      example: FA006011
                      pattern: '^FA(\d{6}|\d{5}X)$'
                      description: NACSIS-CATの参加組織ID(FA番号)
                    url_pc:
                      type: string
                      minLength: 1
                      format: uri
                      example: 'http://library.twcu.ac.jp/'
                      description: PC版ウェブサイト
                    distance:
                      type: string
                      description: パラメータで`geocode`が指定されている場合、その地点からの距離(単位：km)
                  required:
                    - libid
                    - formal
                    - short
                    - systemid
                    - systemname
                    - libkey
                    - category
                    - post
                    - tel
                    - pref
                    - city
                    - address
                    - isil
                    - faid
                    - url_pc
              examples:
                example-1:
                  value:
                    - libid: '106192'
                      formal: 東京女子大学図書館
                      short: 図書館
                      systemid: Univ_Twcu
                      systemname: 東京女子大学
                      libkey: 本館
                      category: SMALL
                      post: 167-8585
                      tel: 03-5382-6784
                      pref: 北海道
                      city: 杉並区
                      address: 東京都杉並区善福寺2丁目6-1
                      geocode: '139.589455,35.710908'
                      isil: JP-1003957
                      faid: FA006011
                      url_pc: 'http://library.twcu.ac.jp/'
      operationId: search-libraries
      description: |-
        指定した条件で図書館の一覧を取得します。緯度経度を指定した場合は、その地点から近い図書館を順に出力します。

        各アプリケーションキーにつき、IP毎に、1000リクエスト/時です。

        `pref`, `systemid`, `geocode`のいずれかは必ず指定する必要があります。
      parameters:
        - schema:
            type: string
            example: 8f4a9a72b71ed467b3a8b4cf320e47f9
            pattern: '^[a-z0-9]{32}$'
          in: query
          name: appkey
          required: true
          description: アプリケーションキーを指定します。
        - schema:
            $ref: '#/components/schemas/pref'
            example: 青森県
          in: query
          name: pref
          description: 都道府県を指定します。
        - schema:
            type: string
            pattern: '^[ぁ-んァ-ン一-龯ー]+[市区町村]$'
            example: 青森市
          in: query
          name: city
          description: 市区町村を指定します。このパラメータは `pref` とセットで利用します。
        - schema:
            type: string
            example: Aomori_Pref
            pattern: '^[A-Z][A-Za-z]*\d*(_[A-Z]?[A-Za-z0-9]*)+$'
          in: query
          name: systemid
          description: 図書館のシステムIDを指定します。
        - schema:
            type: string
            pattern: '^\d+(\.\d+),\d+(\.\d+)$'
            example: '136.7163027,35.390516'
          in: query
          name: geocode
          description: 緯度、経度を指定します。
        - schema:
            type: string
            enum:
              - xml
              - json
            example: xml
            default: xml
          in: query
          name: format
          description: 出力形式を指定します。
        - schema:
            type: string
            example: callback
            default: callback
          in: query
          name: callback
          description: JSONPのcallback関数名を指定します。JSONとして応答する場合はcallbackに空白を指定してください。
        - schema:
            type: integer
          in: query
          name: limit
          description: 図書館の取得件数を指定します。
  /check:
    get:
      summary: 蔵書検索
      tags: []
      responses:
        '200':
          description: |-
            蔵書情報の取得にかかる時間は、各図書館システムによって異なります。1秒以内のところもあれば、遅いシステムだと20秒以上かかるところもあります。 

            遅いシステムに対応するために、クライアントはcheckを何度かリクエスト（ポーリング）してすべての情報が取得できるまで待つ必要があります。
            `continue`が1で返ってきたときは、クライアントは戻り値の`session`をパラメータにして、再度checkをリクエストします。
            `appkey`と`session`は必須、`format`は任意(`xml`または`json`です。デフォルトは`json`)。
            例: `https://api.calil.jp/check?appkey=...&session=...&format=json`

            2度目以降の呼び出しでも、結果の形式は1度目と同じです。継続を示すcontinueが1（真）であるかぎり、ポーリングを繰り返してください。
            ポーリングをおこなっている最中の（つまり、`continue`が`1`のとき）の戻り値の`books`には、その時点までに取得できた蔵書情報の結果が含まれています。すべての情報の取得が完了する前に、これらを表示することでユーザーを待たせない工夫ができます。

            ポーリングは、かならず2秒以上の間隔をあけて呼び出してください。
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: string
                    minLength: 1
                    pattern: '^[a-z0-9]{32}$'
                    example: 11a285036112525afe32b1a3d4c36245
                    description: 検索に時間がかかる場合に、セッションが文字列として返ります。
                  books:
                    type: object
                    description: 本毎にどの図書館に蔵書があるか返ります。
                    additionalProperties:
                      type: object
                      description: ISBNの配列です。
                      additionalProperties:
                        type: object
                        description: システムIDの配列です。
                        properties:
                          status:
                            type: string
                            enum:
                              - OK
                              - Cache
                              - Running
                              - Error
                            example: OK
                            description: 'システムIDに対して、検索状態を示します。OK, Cache, Running, Errorの4つをとります。CacheはOKと同じですが内部的にキャッシュ結果が利用されています。'
                          reverseurl:
                            type: string
                            format: uri
                            description: 予約ページへのアドレスです。
                          libkey:
                            type: object
                            description: システムIDに紐尽く図書館のキーの配列です。図書館館のキー毎に貸出状況（「貸出中」、「貸出可」など）を値として持ちます。蔵書がない場合は、図書館キー自体が配列に含まれず空になります。
                            additionalProperties:
                              description: 貸出状況
                              type: string
                              enum:
                                - 貸出可
                                - 蔵書あり
                                - 館内のみ
                                - 貸出中
                                - 予約中
                                - 準備中
                                - 休館中
                                - 蔵書なし
                  continue:
                    type: integer
                    enum:
                      - 0
                      - 1
                    example: 1
                    description: 0（偽）または1（真）が返ります。1の場合は、まだすべての取得が完了していないことを示します。
                required:
                  - session
                  - continue
              examples:
                example-1:
                  value:
                    session: 11a285036112525afe32b1a3d4c36245
                    books:
                      '4088700104':
                        Tokyo_Setagaya:
                          status: Running
                          reserveurl: ''
                          libkey: {}
                      '4334926940':
                        Tokyo_Setagaya:
                          status: OK
                          reserveurl: 'http://libweb.tokyo.jp/123'
                          libkey:
                            玉川台: 貸出可
                            世田谷: 貸出中
                            経堂: 館内のみ
                    continue: 1
      operationId: get-check
      description: |-
        書籍リクエスト数の制限は今後変更される可能性があります。図書館に対して蔵書の有無と貸出状況を問い合わせます。

        各アプリケーションキーにつき、IP毎に、1000書籍リクエスト/時です。 1IP=ほぼ1ユーザーとみなしており、実用上十分な回数を確保しております。 

        「1書籍リクエスト」は、１つのISBNを１つの図書館システムに問い合わせるのに発生するリクエストのことです。 （例えば、「世田谷区（システムID:Tokyo_Setagaya）」には16の図書館／図書室がありますが(2010春現在)、これらを検索したときは「１図書館システム」と計算されます。） １つの書籍を３つ図書館システムにカンマ区切りで同時に問い合わせた場合は、 「3書籍リクエスト」と数えます。

        checkのポーリングを何度行っても、書籍リクエストは消費しません。 また１度のセッションで同時に問い合わせ可能な最大書籍リクエスト数は100です。 これは、１つの書籍を東京のすべての図書館に問い合わせることが余裕をもってできる数になっています。 
      parameters:
        - schema:
            type: string
          in: query
          name: appkey
          required: true
          description: アプリケーションキーを指定します。
        - schema:
            type: string
            pattern: '^(\d{10}|\d{13})(,(\d{10}|\d{13}))*$'
            example: '4834000826'
          in: query
          name: isbn
          required: true
          description: 書籍のISBNを指定します。カンマ区切りで複数指定できます。
        - schema:
            type: string
            example: Aomori_Pref
            pattern: '^[A-Z][A-Za-z]*\d*(_[A-Z]?[A-Za-z0-9]*)+$'
          in: query
          name: systemid
          required: true
          description: システムIDを指定します。カンマ区切りで複数指定できます。
        - schema:
            type: string
            enum:
              - xml
              - json
            default: json
            example: json
          in: query
          name: format
          description: 出力形式を指定します。
        - schema:
            type: string
            default: callback
            example: 'no'
          in: query
          name: callback
          description: JSONPのcallback関数名を指定します。JSONとして応答する場合はcallbackにnoを指定してください。
    parameters: []
components:
  schemas:
    pref:
      description: 都道府県
      type: string
      enum:
        - 北海道
        - 青森県
        - 岩手県
        - 宮城県
        - 秋田県
        - 山形県
        - 福島県
        - 茨城県
        - 栃木県
        - 群馬県
        - 埼玉県
        - 千葉県
        - 東京都
        - 神奈川県
        - 新潟県
        - 富山県
        - 石川県
        - 福井県
        - 山梨県
        - 長野県
        - 岐阜県
        - 静岡県
        - 愛知県
        - 三重県
        - 滋賀県
        - 京都府
        - 大阪府
        - 兵庫県
        - 奈良県
        - 和歌山県
        - 鳥取県
        - 島根県
        - 岡山県
        - 広島県
        - 山口県
        - 徳島県
        - 香川県
        - 愛媛県
        - 高知県
        - 福岡県
        - 佐賀県
        - 長崎県
        - 熊本県
        - 大分県
        - 宮崎県
        - 鹿児島県
        - 沖縄県
